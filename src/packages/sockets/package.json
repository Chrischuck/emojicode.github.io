{"valueTypes": [],"classes": [{"name": "🏄","genericArguments": [],"documentation":"\n  🏄 represents a socket that listens for clients on a given port.\n","methods": [{"name": "🙋","access": "🔓","returnType": {"package": "sockets", "name": "📞", "optional": true},"genericArguments": [],"documentation":"\n    Waits until a client wants to connect to this socket and returns a socket\n    to communicate with it.\n  ","arguments": []}],"initializers": [{"name": "🆕","access": "🔓","canReturnNothingness": true,"genericArguments": [],"documentation":"\n    Creates a 🏄 instance that immediately starts listening on the given port.\n    This initializer returns Nothingness if the socket can’t be bound to the\n    given port.\n  ","arguments": [{"type": {"package": "s", "name": "🚂", "optional": false},"name":"port"}]}],"classMethods": [],"conformsTo": []},{"name": "📞","genericArguments": [],"documentation":" 📞 represents a socket for communication between client and server. ","methods": [{"name": "💬","access": "🔓","returnType": {"package": "s", "name": "👌", "optional": false},"genericArguments": [],"documentation":"\n    Sends the given data to the peer. Returns true if the data was successfully\n    sent or false on error.\n  ","arguments": [{"type": {"package": "s", "name": "📇", "optional": false},"name":"message"}]},{"name": "🙅","access": "🔓","returnType": {"package": "", "name": "✨", "optional": false},"genericArguments": [],"documentation":"\n    Closes this socket.\n  ","arguments": []},{"name": "👂","access": "🔓","returnType": {"package": "s", "name": "📇", "optional": true},"genericArguments": [],"documentation":"\n    Tries to read up to *bytes* bytes from the socket. Nothingness is returned\n    on error or if the socket was closed by the peer.\n  ","arguments": [{"type": {"package": "s", "name": "🚂", "optional": false},"name":"bytes"}]}],"initializers": [{"name": "🆕","access": "🔓","canReturnNothingness": true,"genericArguments": [],"documentation":"\n    Opens a socket to *address*. *address* can be a host name which will be\n    resolved.\n  ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"host"},{"type": {"package": "s", "name": "🔡", "optional": false},"name":"service"}]}],"classMethods": [],"conformsTo": []}],"enums": [],"protocols": []}