{"classes": [{"name": "📑","documentation":"\n    The 📑 class has many class methods which allow you to work with the file system.\n\n    See the 📄 class for reading and writing.\n","methods": [],"initializers": [],"classMethods": [{"name": "📁","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" This method creates a directory at the given path. If the directory already exists an error is returned. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "🔫","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" This method deletes the file at the given path. *This method may not be used to delete directories.* ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "🔥","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" This method deletes an *empty* directory at the given path. If you need to delete a whole directory hierarchy use 💣. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "💣","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" This method deletes an directory with its content. The method recursively descends the directory hierarchy and deletes every file or directory it finds. Once finished, it deletes the directory itself. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "🔗","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" This method creates a symbolic link to another. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"originalFile"},{"type": {"package": "s", "name": "🔡", "optional": false},"name":"destination"}]},{"name": "📃","returnType": {"package": "", "name": "👌", "optional": false},"documentation":" Determines whether a file exists at the given path. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "📜","returnType": {"package": "", "name": "👌", "optional": false},"documentation":" Determines whether a file exists and the given path and if it is readable. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "📝","returnType": {"package": "", "name": "👌", "optional": false},"documentation":" Determines whether a file exists and the given path and if it is writeable. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "👟","returnType": {"package": "", "name": "👌", "optional": false},"documentation":" Determines whether a file exists and the given path and if it is executable. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "📏","returnType": {"package": "", "name": "🚂", "optional": false},"documentation":" Determines the size of a file at a given path. If the file cannot be found or any other error occurs the method returns -1. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]}],"conformsTo": []},{"name": "📄","documentation":" \n    The 📄 class allows you to read and write to files.\n  \n    It provides several class methods which are shortcuts to reading and writing. They operate always on the whole file and reading can be very inefficient using these shortcuts when working with big files, because they will read the whole file into memory.\n","methods": [{"name": "✏","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" Write the data at the current file pointer position. ","arguments": [{"type": {"package": "s", "name": "📇", "optional": false},"name":"data"}]},{"name": "📓","returnType": {"package": "s", "name": "📇", "optional": true},"documentation":"\n    Reads as many bytes as specified from the file pointer position.\n    \n    Keep in mind that a byte is not equal to one character! \n  ","arguments": [{"type": {"package": "", "name": "🚂", "optional": false},"name":"bytesToRead"}]},{"name": "🗡","returnType": {"package": "s", "name": "📇", "optional": true},"documentation":" Trys to read one line. If the end of the stream has been reached Nothingness is returned. ","arguments": []},{"name": "🔚","returnType": {"package": "", "name": "✨", "optional": false},"documentation":" Seeks the file pointer to the end of the file. ","arguments": []},{"name": "🔛","returnType": {"package": "", "name": "✨", "optional": false},"documentation":" Seeks the file pointer to the given position. ","arguments": [{"type": {"package": "", "name": "🚂", "optional": false},"name":"position"}]}],"initializers": [{"name": "📝","canReturnNothingness": true,"documentation":"\n    Opens the file at the given path for writing. The file pointer is set to the beginning of the file and the file is truncated to zero length or created.\n  \n    This initializer returns nothingness if the file can not be opened for some reason. In many cases this occurs when you don’t have the permission to create or open the file.\n  \n    You cannot read from a file opened with this initializer.\n  ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"message"}]},{"name": "📜","canReturnNothingness": true,"documentation":"\n    Opens the file at the given path for reading. The file pointer is set to the beginning of the file.\n  \n    This initializer returns nothingness if the file can not be opened for some reason. In many cases this occurs when you don’t have the permission to open the file or when it does not exist.\n  \n    You cannot write to a file opened with this initializer.\n  ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"message"}]}],"classMethods": [{"name": "💾","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" This class method tries to write the string encoded as UTF8 to the given path. If the file already exists, it will be overwritten. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"},{"type": {"package": "s", "name": "🔡", "optional": false},"name":"string"}]},{"name": "📖","returnType": {"package": "s", "name": "🔡", "optional": true},"documentation":" This method reads a whole file, assuming it is encoded into proper UTF8. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "📻","returnType": {"package": "s", "name": "🚨", "optional": true},"documentation":" This class method tries to write the given 📇 to the given path. If the file already exists, it will be overwritten. ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"},{"type": {"package": "s", "name": "📇", "optional": false},"name":"data"}]},{"name": "📇","returnType": {"package": "s", "name": "📇", "optional": true},"documentation":" Reads as many bytes as specified from the file pointer position. Keep in mind that a byte is not equal to one character! ","arguments": [{"type": {"package": "s", "name": "🔡", "optional": false},"name":"path"}]},{"name": "📤","returnType": {"package": "files", "name": "📄", "optional": false},"documentation":" Returns a 📄 object representing the **standard output**. ","arguments": []},{"name": "📥","returnType": {"package": "files", "name": "📄", "optional": false},"documentation":" Returns a 📄 object representing the **standard input**. ","arguments": []},{"name": "📯","returnType": {"package": "files", "name": "📄", "optional": false},"documentation":" Returns a 📄 object representing the **standard error**. ","arguments": []}],"conformsTo": []}],"enums": [],"protocols": []}